// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel WaveKernel

RWStructuredBuffer<float3> _Positions;
uint _Resolution;
float _Step, _Time, _TransitionProgress;

float2 GetUV(uint3 id)
{
    return (id.xy + 0.5) * _Step - 1.0;
}

void SetPosition(uint3 id, float3 position)
{
    if (id.x < _Resolution && id.y < _Resolution)
    {
        _Positions[id.x + id.y * _Resolution] = position;
    }
}

#define PI 3.14159265358979323846

float3 Wave(float u, float v, float t)
{
    float3 p;
    p.x = u;
    p.y = sin(PI * u + v + t);
    p.z = v;
    return p;
}

// numthreads定义线程组内的线程分布（三维，8列8行）
[numthreads(8,8,1)]
// 当前线程在所有分发线程组中的id：SV_DispatchThreadID；当前所在线程组的id：SV_GroupID；当前线程在组内的id：SV_GroupThreadID
// SV_DispatchThreadID = SV_GroupID * numthreads + SV_GroupThreadID
void WaveKernel (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
    float2 uv = GetUV(id);
    SetPosition(id, Wave(uv.x, uv.y, _Time));
}
